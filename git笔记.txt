git包含三个区域
	1、工作区
	2、暂存区
	3、版本库
git基本命令
	git init ：初始化文件夹，将该文件夹变为Git管理仓库
	git add a.txt ：将a.txt文件提交到工作区
	git commit -m "set commit logs" ：将暂存区中的修改全部提交到版本区，-m后加提交日志
	git status ：查看仓库的状态
	git diff a.txt ：表示查看工作区中的a.txt与版本区/缓存区中的区别
	git log ：查看最近到最远的提交日志，也就是在commit中-m后输入的内容
	git reflog ：查看最近到最远的每一次命令
	git reset --hard HEAD : 恢复到版本库中当前版本
	git reset --hard HEAD^ ：恢复到版本库中上一个版本
	git reset --hard HEAD~10 ：恢复到版本库中往上第10个版本
	git reset --hard "commit_id" : 恢复到指定版本号的版本，commit_id通过git log/reflog查看
	git reset HEAD a.txt : 恢复a.txt文件版本（HEAD用法同上）
	git checkout -- a.txt : 覆盖工作区的文件（将缓存区或版本库中a.txt覆盖工作区的a.txt）、git checkout -- file命令中的--很重要，没有--，就变成了“创建一个新分支”的命令。
	git rm a.txt : 删除版本库中的a.txt，需要commit提交确认。

远程仓库
	链接远程命令	
	git remote add origin https://github.com/wanglong9/learngit.git
	上传本地版本
	git push [-u] origin master

	克隆远程服务器版本
	git clone https://github.com/wanglong9/gitskills.git

创建与合并分支
	git branch dev :创建分支dev
	git checkout dev：切换到dev分区
	git checkout -b dev：上述2个命令合并
	git branch ：查看当前分支（会列出所有分支，以*号开头的为当前分支）
	git merge dev：在master分支的工作环境下，将dev分支与master合并（Git会用Fast forward模式，这种模式下，删除分支后，会丢掉分支信息。）
	git branch -d dev：删除dev分支

解决冲突	
	git merge --no-ff -m "xxxx" dev: 将dev分支与master合并，并提交一个commit，--no-ff表示忽略Fast forward模式，这样删除该分支后，仍能找回来，不会丢失分支信息
	提示Automatic merge failed; fix conflicts and then commit the result.
	则修改文件去除冲突地方，再执行add和commit命令
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
	用git log --graph命令可以看到分支合并图。

bug分支（下列命令适用于修复项目bug的场景）
	git stash ：保存当前工作区状态（相当于对当前工作区做了一个快照，适用于需要切换分支，但又不能提交当前分支的场景）
	git stash list ：查看快照列表和对应的版本号
	git stash apply [版本号]：恢复快照版本
	git stash drop [版本号]： 删除快照版本
	git stash pop [版本号]： 回复并删除快照版本（合并apply和pop的命令）

Feature分支（适用于开发了一个新分支后，又不需要该分支的情况）
	git branch -D dev：删除未合并的分支
